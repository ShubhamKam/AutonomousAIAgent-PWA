name: Build Android APK

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Debug - Show current structure
      run: |
        echo "🔍 Current directory:"
        pwd
        ls -la
        echo "📁 Looking for subdirectories:"
        find . -name "*.html" -type f | head -10
        echo "📁 Looking for project files:"
        find . -name "fixed-final.html" -o -name "capacitor.config.json" -o -name "package.json" | head -10
        
    - name: Navigate to correct directory
      run: |
        echo "🔍 Finding the correct project directory..."
        if [ -f "fixed-final.html" ]; then
          echo "✅ Files found in root directory"
          PROJECT_DIR="."
        elif [ -f "AutonomousAIAgent-PWA/fixed-final.html" ]; then
          echo "✅ Files found in AutonomousAIAgent-PWA directory"
          PROJECT_DIR="AutonomousAIAgent-PWA"
          cd AutonomousAIAgent-PWA
        elif [ -f "AutonomousAIAgent/fixed-final.html" ]; then
          echo "✅ Files found in AutonomousAIAgent directory"
          PROJECT_DIR="AutonomousAIAgent"
          cd AutonomousAIAgent
        else
          echo "🔍 Searching all directories..."
          PROJECT_DIR=$(find . -name "fixed-final.html" -type f | head -1 | xargs dirname)
          if [ -n "$PROJECT_DIR" ] && [ "$PROJECT_DIR" != "." ]; then
            echo "✅ Found project in: $PROJECT_DIR"
            cd "$PROJECT_DIR"
          else
            echo "⚠️ Using root directory"
            PROJECT_DIR="."
          fi
        fi
        echo "PROJECT_DIR=$PROJECT_DIR" >> $GITHUB_ENV
        echo "📁 Current working directory:"
        pwd
        ls -la
        
    - name: Setup Node.js 
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Accept licenses
      run: yes | sdkmanager --licenses || true
      
    - name: Install Capacitor CLI
      run: npm install -g @capacitor/cli@5
      
    - name: Setup web directory
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        echo "🔧 Setting up web directory..."
        echo "📁 Current directory: $(pwd)"
        mkdir -p www
        
        # Find and copy the main HTML file
        if [ -f "fixed-final.html" ]; then
          echo "✅ Found fixed-final.html"
          cp fixed-final.html www/index.html
        elif [ -f "index.html" ]; then
          echo "✅ Found index.html"
          cp index.html www/index.html
        else
          echo "⚠️ Creating basic HTML"
          cat > www/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Autonomous AI Agent</title>
            <style>
                body { font-family: Arial, sans-serif; background: #0d0d0d; color: #fff; text-align: center; padding: 50px; }
                h1 { color: #ff6600; }
            </style>
        </head>
        <body>
            <h1>🤖 Autonomous AI Agent</h1>
            <p>Professional AI Agent Mobile App</p>
        </body>
        </html>
        EOF
        fi
        
        # Copy additional files if they exist
        cp *.js www/ 2>/dev/null || true
        
        echo "📁 Web directory contents:"
        ls -la www/
        
    - name: Initialize Capacitor
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        echo "🔧 Initializing Capacitor..."
        echo "📁 Working in: $(pwd)"
        npx cap init "AutonomousAIAgent" "com.autonomousai.agent" --web-dir=www
        
        echo "📄 Capacitor config created:"
        cat capacitor.config.json
        
    - name: Add Android platform
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        echo "📱 Adding Android platform..."
        echo "📁 Working in: $(pwd)"
        
        # Check if android directory already exists
        if [ -d "android" ]; then
          echo "✅ Android platform already exists, skipping add step"
          echo "📁 Existing Android directory:"
          ls -la android/
          
          # Verify gradlew exists and is executable
          if [ -f "android/gradlew" ]; then
            echo "✅ Gradlew file found"
            chmod +x android/gradlew
          else
            echo "❌ Gradlew missing, this will cause build issues"
          fi
        else
          echo "📱 Adding new Android platform..."
          
          # Ensure we have a clean package.json for Capacitor
          if [ ! -f "package.json" ]; then
            echo "📦 Creating package.json..."
            cat > package.json << 'EOF'
        {
          "name": "autonomous-ai-agent",
          "version": "1.0.0",
          "scripts": {
            "build": "echo build complete"
          },
          "dependencies": {
            "@capacitor/android": "^5.0.0",
            "@capacitor/core": "^5.0.0"
          },
          "devDependencies": {
            "@capacitor/cli": "^5.0.0"
          }
        }
        EOF
          fi
          
          # Install dependencies first
          echo "📦 Installing dependencies..."
          npm install --no-package-lock
          
          # Add Android platform
          echo "📱 Adding Android platform..."
          npx cap add android
          
          echo "📁 Android directory created:"
          ls -la android/
        fi
        
    - name: Sync project
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        echo "🔄 Syncing Capacitor..."
        echo "📁 Working in: $(pwd)"
        
        # Ensure Capacitor dependencies are installed
        if [ ! -d "node_modules/@capacitor" ]; then
          echo "📦 Installing Capacitor dependencies..."
          
          # Create or update package.json with proper dependencies
          cat > package.json << 'EOF'
        {
          "name": "autonomous-ai-agent",
          "version": "1.0.0",
          "scripts": {
            "build": "echo build complete"
          },
          "dependencies": {
            "@capacitor/android": "^5.0.0",
            "@capacitor/core": "^5.0.0"
          },
          "devDependencies": {
            "@capacitor/cli": "^5.0.0"
          }
        }
        EOF
          
          npm install --no-package-lock
        fi
        
        # Verify Capacitor Android is available
        if [ ! -d "node_modules/@capacitor/android" ]; then
          echo "❌ @capacitor/android still missing, installing directly..."
          npm install @capacitor/android@^5.0.0 --no-package-lock
        fi
        
        echo "📦 Capacitor dependencies check:"
        ls -la node_modules/@capacitor/ || echo "No @capacitor directory"
        
        # Now sync
        echo "🔄 Running Capacitor sync..."
        npx cap sync android
        
    - name: Debug - Check Android structure
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        echo "🔍 Android directory structure:"
        echo "📁 Working in: $(pwd)"
        if [ -d "android" ]; then
          ls -la android/
          echo "📱 Android app directory:"
          ls -la android/app/ || echo "No app directory"
          echo "🛠️ Gradlew file:"
          ls -la android/gradlew || echo "No gradlew file"
        else
          echo "❌ Android directory missing"
          exit 1
        fi
        
    - name: Build APK
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        echo "🔨 Building APK..."
        echo "📁 Working in: $(pwd)"
        
        if [ ! -d "android" ]; then
          echo "❌ Android directory missing, cannot build APK"
          exit 1
        fi
        
        cd android
        
        # Check Gradle wrapper structure
        echo "🔍 Checking Gradle wrapper structure:"
        ls -la gradle/wrapper/ || echo "No wrapper directory"
        
        # Fix Gradle wrapper if missing
        if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
          echo "🔧 Fixing Gradle wrapper..."
          
          # Create wrapper directory
          mkdir -p gradle/wrapper
          
          # Download Gradle wrapper jar
          curl -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.4.0/gradle/wrapper/gradle-wrapper.jar
          
          # Create gradle-wrapper.properties
          cat > gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip
        networkTimeout=10000
        validateDistributionUrl=true
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
          
          echo "✅ Gradle wrapper fixed"
        fi
        
        # Ensure gradlew is executable
        if [ -f "./gradlew" ]; then
          chmod +x ./gradlew
          echo "✅ Gradlew is ready"
        else
          echo "❌ Gradlew file missing"
          ls -la
          exit 1
        fi
        
        # Verify wrapper works
        echo "🔍 Testing Gradle wrapper..."
        ./gradlew --version || {
          echo "❌ Gradle wrapper still not working, trying direct gradle..."
          gradle --version && {
            echo "🔧 Using system gradle instead..."
            gradle assembleDebug
          } || {
            echo "❌ Both gradlew and gradle failed"
            exit 1
          }
        } && {
          # Build the APK with gradlew
          echo "🔨 Starting APK build with gradlew..."
          ./gradlew assembleDebug --stacktrace --info
        }
        
        echo "📱 APK location:"
        find . -name "*.apk" -type f || echo "❌ No APK found"
        
        # Show build outputs directory
        echo "📁 Build outputs:"
        ls -la app/build/outputs/apk/debug/ || echo "No debug APK directory"
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: app-debug
        path: ${{ env.PROJECT_DIR }}/android/app/build/outputs/apk/debug/app-debug.apk
        
    - name: Debug failure info
      if: failure()
      run: |
        echo "🔍 BUILD FAILURE DEBUG INFORMATION"
        echo "=================================="
        echo "📁 Project Structure:"
        ls -la
        echo "📦 Node Modules Status:"
        ls -la node_modules/ || echo "No node_modules"
        echo "🔧 Gradle Status:"
        cd android 2>/dev/null && ls -la || echo "No android directory"