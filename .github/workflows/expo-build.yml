name: Expo Build Alternative

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type to use'
        required: true
        default: 'expo'
        type: choice
        options:
        - expo
        - react-native

jobs:
  expo-build:
    if: github.event.inputs.build_type == 'expo'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Expo CLI
      run: npm install -g @expo/cli

    - name: Create Expo App
      run: |
        # Create a new Expo app with all our AI agent features
        npx create-expo-app AutonomousAIAgentExpo --template blank-typescript
        cd AutonomousAIAgentExpo
        
        # Install additional dependencies for AI functionality
        npm install @react-native-async-storage/async-storage axios
        
        # Create our AI agent app
        cat > App.tsx << 'EOF'
        import React, { useState, useEffect } from 'react';
        import { StyleSheet, Text, View, TextInput, TouchableOpacity, ScrollView, Alert } from 'react-native';
        import AsyncStorage from '@react-native-async-storage/async-storage';

        interface Message {
          id: string;
          text: string;
          sender: 'user' | 'agent';
          timestamp: Date;
        }

        export default function App() {
          const [messages, setMessages] = useState<Message[]>([]);
          const [inputText, setInputText] = useState('');
          const [apiKey, setApiKey] = useState('');
          const [showApiKeyInput, setShowApiKeyInput] = useState(true);

          useEffect(() => {
            loadApiKey();
            if (!showApiKeyInput) {
              addAgentMessage("Hello! I'm your Autonomous AI Agent. I can help you with tasks, answer questions, and provide assistance. What would you like to do today?");
            }
          }, [showApiKeyInput]);

          const loadApiKey = async () => {
            try {
              const savedApiKey = await AsyncStorage.getItem('anthropic_api_key');
              if (savedApiKey) {
                setApiKey(savedApiKey);
                setShowApiKeyInput(false);
              }
            } catch (error) {
              console.error('Failed to load API key:', error);
            }
          };

          const saveApiKey = async (key: string) => {
            try {
              await AsyncStorage.setItem('anthropic_api_key', key);
              setApiKey(key);
              setShowApiKeyInput(false);
            } catch (error) {
              console.error('Failed to save API key:', error);
            }
          };

          const generateId = () => {
            return Math.random().toString(36).substr(2, 9);
          };

          const addUserMessage = (text: string) => {
            const message: Message = {
              id: generateId(),
              text,
              sender: 'user',
              timestamp: new Date()
            };
            setMessages(prev => [...prev, message]);
            return message;
          };

          const addAgentMessage = (text: string) => {
            const message: Message = {
              id: generateId(),
              text,
              sender: 'agent',
              timestamp: new Date()
            };
            setMessages(prev => [...prev, message]);
            return message;
          };

          const handleSendMessage = async () => {
            if (!inputText.trim()) return;

            const userMessage = addUserMessage(inputText);
            setInputText('');

            // Simulate AI response (in real app, would call Anthropic API)
            setTimeout(() => {
              const responses = [
                "I understand you'd like help with that. As an autonomous AI agent, I can assist you with planning, organizing, and executing tasks.",
                "That's an interesting request! Let me help you break that down into actionable steps.",
                "I'm designed to bridge the gap between your ideas and actions. Here's how I can help with that...",
                "As your autonomous assistant, I'll proactively suggest the best approach for this task.",
                "I can handle that autonomously. Let me create a plan and execute it step by step."
              ];
              const randomResponse = responses[Math.floor(Math.random() * responses.length)];
              addAgentMessage(randomResponse);
            }, 1000);
          };

          const formatTime = (date: Date) => {
            return new Date(date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
          };

          if (showApiKeyInput) {
            return (
              <View style={styles.container}>
                <View style={styles.setupContainer}>
                  <Text style={styles.title}>🤖 Autonomous AI Agent</Text>
                  <Text style={styles.setupText}>
                    Enter your Anthropic API key to get started:
                  </Text>
                  <TextInput
                    style={styles.apiKeyInput}
                    value={apiKey}
                    onChangeText={setApiKey}
                    placeholder="sk-ant-api03-..."
                    secureTextEntry
                    autoCapitalize="none"
                  />
                  <TouchableOpacity
                    style={styles.setupButton}
                    onPress={() => apiKey.trim() ? saveApiKey(apiKey.trim()) : Alert.alert('Please enter a valid API key')}
                  >
                    <Text style={styles.setupButtonText}>Start AI Agent</Text>
                  </TouchableOpacity>
                  <Text style={styles.note}>
                    Get your API key from console.anthropic.com
                  </Text>
                </View>
              </View>
            );
          }

          return (
            <View style={styles.container}>
              <View style={styles.header}>
                <Text style={styles.headerTitle}>Autonomous AI Agent</Text>
                <Text style={styles.headerSubtitle}>Bridging mind and action</Text>
              </View>

              <ScrollView style={styles.messagesContainer}>
                {messages.map((message) => (
                  <View
                    key={message.id}
                    style={[
                      styles.messageContainer,
                      message.sender === 'user' ? styles.userMessageContainer : styles.agentMessageContainer
                    ]}
                  >
                    <View
                      style={[
                        styles.messageBubble,
                        message.sender === 'user' ? styles.userBubble : styles.agentBubble
                      ]}
                    >
                      <Text style={[
                        styles.messageText,
                        message.sender === 'user' ? styles.userText : styles.agentText
                      ]}>
                        {message.text}
                      </Text>
                      <Text style={styles.messageTime}>
                        {formatTime(message.timestamp)}
                      </Text>
                    </View>
                  </View>
                ))}
              </ScrollView>

              <View style={styles.inputContainer}>
                <TextInput
                  style={styles.textInput}
                  value={inputText}
                  onChangeText={setInputText}
                  placeholder="Ask your AI agent anything..."
                  multiline
                  onSubmitEditing={handleSendMessage}
                />
                <TouchableOpacity
                  style={[styles.sendButton, !inputText.trim() && styles.sendButtonDisabled]}
                  onPress={handleSendMessage}
                  disabled={!inputText.trim()}
                >
                  <Text style={styles.sendButtonText}>Send</Text>
                </TouchableOpacity>
              </View>
            </View>
          );
        }

        const styles = StyleSheet.create({
          container: {
            flex: 1,
            backgroundColor: '#f5f5f5',
            paddingTop: 50,
          },
          setupContainer: {
            flex: 1,
            justifyContent: 'center',
            alignItems: 'center',
            padding: 20,
          },
          title: {
            fontSize: 28,
            fontWeight: 'bold',
            color: '#333',
            marginBottom: 20,
            textAlign: 'center',
          },
          setupText: {
            fontSize: 16,
            color: '#666',
            marginBottom: 20,
            textAlign: 'center',
          },
          apiKeyInput: {
            width: '100%',
            borderWidth: 1,
            borderColor: '#ddd',
            borderRadius: 10,
            paddingHorizontal: 15,
            paddingVertical: 12,
            fontSize: 16,
            backgroundColor: '#fff',
            marginBottom: 20,
          },
          setupButton: {
            backgroundColor: '#007AFF',
            borderRadius: 10,
            paddingHorizontal: 30,
            paddingVertical: 15,
            marginBottom: 20,
          },
          setupButtonText: {
            color: '#fff',
            fontSize: 16,
            fontWeight: '600',
          },
          note: {
            fontSize: 12,
            color: '#999',
            textAlign: 'center',
          },
          header: {
            backgroundColor: '#fff',
            paddingHorizontal: 20,
            paddingVertical: 15,
            borderBottomWidth: 1,
            borderBottomColor: '#e0e0e0',
          },
          headerTitle: {
            fontSize: 20,
            fontWeight: 'bold',
            color: '#333',
          },
          headerSubtitle: {
            fontSize: 14,
            color: '#666',
            marginTop: 2,
          },
          messagesContainer: {
            flex: 1,
            paddingHorizontal: 20,
            paddingVertical: 10,
          },
          messageContainer: {
            marginBottom: 15,
          },
          userMessageContainer: {
            alignItems: 'flex-end',
          },
          agentMessageContainer: {
            alignItems: 'flex-start',
          },
          messageBubble: {
            maxWidth: '80%',
            paddingHorizontal: 15,
            paddingVertical: 10,
            borderRadius: 18,
          },
          userBubble: {
            backgroundColor: '#007AFF',
          },
          agentBubble: {
            backgroundColor: '#E5E5EA',
          },
          messageText: {
            fontSize: 16,
            lineHeight: 20,
          },
          userText: {
            color: '#fff',
          },
          agentText: {
            color: '#000',
          },
          messageTime: {
            fontSize: 11,
            color: '#999',
            marginTop: 5,
            textAlign: 'right',
          },
          inputContainer: {
            flexDirection: 'row',
            alignItems: 'flex-end',
            paddingHorizontal: 20,
            paddingVertical: 15,
            backgroundColor: '#fff',
            borderTopWidth: 1,
            borderTopColor: '#e0e0e0',
          },
          textInput: {
            flex: 1,
            borderWidth: 1,
            borderColor: '#ddd',
            borderRadius: 20,
            paddingHorizontal: 15,
            paddingVertical: 10,
            fontSize: 16,
            maxHeight: 100,
            backgroundColor: '#f9f9f9',
            marginRight: 10,
          },
          sendButton: {
            backgroundColor: '#007AFF',
            borderRadius: 20,
            paddingHorizontal: 20,
            paddingVertical: 10,
          },
          sendButtonDisabled: {
            backgroundColor: '#ccc',
          },
          sendButtonText: {
            color: '#fff',
            fontSize: 16,
            fontWeight: '600',
          },
        });
        EOF

        # Update app.json for proper app name
        cat > app.json << 'EOF'
        {
          "expo": {
            "name": "Autonomous AI Agent",
            "slug": "autonomous-ai-agent",
            "version": "1.0.0",
            "orientation": "portrait",
            "icon": "./assets/icon.png",
            "userInterfaceStyle": "light",
            "splash": {
              "image": "./assets/splash.png",
              "resizeMode": "contain",
              "backgroundColor": "#ffffff"
            },
            "assetBundlePatterns": [
              "**/*"
            ],
            "ios": {
              "supportsTablet": true
            },
            "android": {
              "adaptiveIcon": {
                "foregroundImage": "./assets/adaptive-icon.png",
                "backgroundColor": "#FFFFFF"
              },
              "package": "com.shubhamkam.autonomousaiagent"
            },
            "web": {
              "favicon": "./assets/favicon.png"
            }
          }
        }
        EOF

    - name: Build Expo APK
      run: |
        cd AutonomousAIAgentExpo
        npx expo install --fix
        npx eas build --platform android --profile preview --local

    - name: Find and upload APK
      run: |
        cd AutonomousAIAgentExpo
        find . -name "*.apk" -exec ls -lh {} \;
        APK_FILE=$(find . -name "*.apk" | head -1)
        if [ -f "$APK_FILE" ]; then
          echo "APK_PATH=$APK_FILE" >> $GITHUB_ENV
          echo "✅ Expo APK built successfully: $APK_FILE"
        else
          echo "❌ No APK file found"
          exit 1
        fi

    - name: Upload Expo APK
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: AutonomousAIAgent-Expo
        path: ${{ env.APK_PATH }}
        retention-days: 30